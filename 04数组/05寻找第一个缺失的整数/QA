给定一个数组A[0…N-1]，找到从1开始，第一个不在数组中的正整数。
 如3,5,1,2,-3,7,14,8输出4。

1）暴力求解：
对于整数1到N，依次与数组中的数进行比对，找出第一个不在数组中的正整数，时间复杂度为O（N^2），空间复杂度为O(1)


解法二：
先把数组元素进行排序，然后遍历数组，检查任意两个相邻元素数值是否是连续的。如果不连续，则中间缺少的整数就是所要寻找的；如果全都连续，则缺少的整数不是1就是100。
假设数组长度是N，如果用时间复杂度为O（N*LogN）的排序算法进行排序，那么该解法的时间复杂度是O（N*LogN），空间复杂度是O（1）。

2)  哈希求解：
建立一个长度为N的数组，若原数组中的数存在，则在其对应的位置置1，比如原数组中第一个数是3，则A[2]=1,完毕以后遍历即可得知，
易知时间复杂度为O（N），空间复杂度为O（N），此法为空间换时间

3）循环不变式
将找到的元素放到正确的位置，如果发现某个元素一直没找到，则该元素即为所求
循环不变式：如果某命题初始为真，且每次改变后仍保持该命题为真，则若干次改变后该命题为真
具体算法：假设前i-1个数已经找到，分别存放在A[0...i-1]中，继续考察A[i];
若A[i]<i，且A[i]>1，则A[i]在前面已经出现过，丢弃（为了防止算法退化，可将数组最后一个数放在A[i]上继续考察）
若A[i]>i，且A[I]<=N,则将A[i]和A[A[i]]交换；
若A[i]=i,  则考察A[i+1]