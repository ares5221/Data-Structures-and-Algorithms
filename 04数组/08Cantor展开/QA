已知数组A[0…N-1]乱序着前N个正整数，现统计后缀数组A[i+1…N-1]中小于元素A[i]的
数目，并存放在数组C[i]中。如给定数组A={4,6,2,5,3,1}，得到数组C={3,4,1,2,1,0}。
 问：给定数组C={3,4,1,2,1,0}，如何恢复数组A？
我们称A为原数组，C为Cantor数组。

给定顺序数组B={1,2,3…N-1,N}，从0开始数
考察Cantor数组的首位C[0]：小于A[0]的个数为C[0]，则A[0]为B[C[0]]
在序列数组B中删除B[C[0]]，仍然满足以上性质。
以上代码空间复杂度为O(N)，时间复杂度为O(N2)

优化版本：
 Cantor数组：{3,4,1,2,1,0}
 原数组 ：{4,6,2,5,3,1}
 考察Cantor数组中第一个出现0的位置：它表示位于该位置右侧的所有元素都大于该元素
 则该元素必然是最小的。
 每次找到第一个0后，将0左侧的Cantor值都减一，重复以上操作。
 空间复杂度为O(1)。

康托展开
康托展开是一个全排列到一个自然数的双射，常用于构建哈希表时的空间压缩。 康托展开的实质是计算当前排列在所有由小到大全排列中的顺序，因此是可逆的。
例如要对9的全排列进行判重.没有必要开一个10^9的数组,同时内存也不允许开到那么大的数组.
只需要确定这个排列在总的排列情况中是第几小的就可以了.
例如:我想知道3421是{1,2,3，4}的排列中第几个大的数可以这样考虑
第一位是3，当第一位的数小于3时，在子数组[4,2,1]中小于3的数有1，2 所以有2*3!=12个
再看第二位4的 小于4的数在子数组[2,1]有3个 所以有2*2!=4，
再看第三位的2，小于2的数在子数组[1]有一位 1*1!
最后小于第四位的1的数在子数组[]有0位， 0*0!
所以小于3421的{1,2,3,4}排列数有2*3!+2*2!+1*1!+0*0!=17个所以321是第18个大的数。 2*3!+2*2!+1*1!+0*0!是康托展开.

康托展开的公式是 X=an*(n-1)!+an-1*(n-2)!+...+ai*(i-1)!+...+a2*1!+a1*0! 其中，ai为当前未出现的元素中是排在第几个（从0开始）。
　　举个例子来说明一下。例如，有一个数组 s = ["A", "B", "C", "D"]，它的一个排列 s1 = ["D", "B", "A", "C"]，现在要把 s1 映射成 X。
n 指的是数组的长度，也就是4，所以X(s1) = a4*3! + a3*2! + a2*1! + a1*0!
关键问题是 a4、a3、a2 和 a1 等于啥？
a4 = "D" 这个元素在子数组 ["D", "B", "A", "C"] 中是第几大的元素。"A"是第0大的元素，"B"是第1大的元素，"C" 是第2大的元素，"D"是第3大的元素，所以 a4 = 3。
a3 = "B" 这个元素在子数组 ["B", "A", "C"] 中是第几大的元素。"A"是第0大的元素，"B"是第1大的元素，"C" 是第2大的元素，所以 a3 = 1。
a2 = "A" 这个元素在子数组 ["A", "C"] 中是第几大的元素。"A"是第0大的元素，"C"是第1大的元素，所以 a2 = 0。
a1 = "C" 这个元素在子数组 ["C"] 中是第几大的元素。"C" 是第0大的元素，所以 a1 = 0。（因为子数组只有1个元素，所以a1总是为0）
所以，X(s1) = 3*3! + 1*2! + 0*1! + 0*0! = 20